# Empire ERP. Занимательная бухгалтерия: Аналитический учет


## Настройка проекта

Клонируем проект с гитхаба:
```bash
git clone https://github.com/nomhoi/empire-erp.git
```

Заходим в папку **reaserch/day3/**.

Запустим базу данных и выполним тесты:

```bash
docker-compose run test
```

Подключимся к базе данных **empire-erp**:
```bash
docker exec -it db psql -U postgres -d empire-erp
```

## Step 1. Простые счета

Счета без субсчетов называются простыми счетами. На этом шаге повторим получение оборотов по счетам с использованием главной книги.

Выполним команду в командной строке **psql** для инициализации базы данных:
```
empire-erp=# \i step1.sql
```

Файл **step1.sql**:
```sql
!INCLUDE "code/step1.sql"
```

Создаем журнал проводок **general journal**. В прошлой статье ошибка, на самом деле это журнал проводок, а не главная книга.

Заполняем журнал проводок какими-нибудь исходными данными:
```sql
!INCLUDE "code/step1_1.sqlx"
!INCLUDE "code/step1_1.out"
```
Выводим содержимое журнала:
```sql
!INCLUDE "code/step1_2.sqlx"
!INCLUDE "code/step1_2.out"
```
Получаем из журнала проводок главную книгу и сохраняем ее в таблице **general_ledger**:
```sql
!INCLUDE "code/step1_3.sqlx"
!INCLUDE "code/step1_3.out"
```
Выводим содержимое главной книги:
```sql
!INCLUDE "code/step1_4.sqlx"
!INCLUDE "code/step1_4.out"
```
Обороты по счетам:
```sql
!INCLUDE "code/step1_5.sqlx"
!INCLUDE "code/step1_5.out"
```


## Step 2. Сложные счета

Cчета с субсчетами называются сложными счетами. Напомню, что по нашим условиям счета 1-4 являются активными, 5-8 - активно-пассивными и 9-12 - пассивными. Введем дополнительное условие: каждый четный счет является сложным счетом.

Файл **step2.sql**. Создаем журнал проводок **general journal** содержащий субсчета:
```sql
!INCLUDE "code/step2.sql"
```

Заполняем журнал проводок какими-нибудь исходными данными:
```sql
!INCLUDE "code/step2_1.sqlx"
!INCLUDE "code/step2_1.out"
```
Здесь мы должны помнить, что в сложных счетах субсчет не может принимать значение NULL, а в простых счетах значение субсчета всегда должно быть равным NULL . Можно, например, добавить триггер, который будет проверять этот момент.

Выводим содержимое журнала:
```sql
!INCLUDE "code/step2_2.sqlx"
!INCLUDE "code/step2_2.out"
```
Получаем из журнала проводок главную книгу и сохраняем ее в таблице **general_ledger**:
```sql
!INCLUDE "code/step2_3.sqlx"
!INCLUDE "code/step2_3.out"
```
Выводим содержимое главной книги:
```sql
!INCLUDE "code/step2_4.sqlx"
!INCLUDE "code/step2_4.out"
```
Обороты по синтетическим счетам:
```sql
!INCLUDE "code/step2_5.sqlx"
!INCLUDE "code/step2_5.out"
```
Обороты по субсчетам:
```sql
!INCLUDE "code/step2_6.sqlx"
!INCLUDE "code/step2_6.out"
```

## Step 3. Счет материалы. Синтетический учет

Сейчас ненадолго вернемся на Землю, в Россию. Будем манипулировать объектами, которые можно увидеть и потрогать. Используем счет 10 "Материалы".

Файл **step3.sql**:
```sql
!INCLUDE "code/step3.sql"
```
Выполняем проводки с использованием счета 10:
```sql
!INCLUDE "code/step3_1.sqlx"
!INCLUDE "code/step3_1.out"
```
Первой проводкой получаем какие-то материалы от поставщика. Второй проводкой начисляем НДС.
Третьей проводкой отпускаем материалы в производство.

Выводим содержимое журнала:
```sql
!INCLUDE "code/step3_2.sqlx"
!INCLUDE "code/step3_2.out"
```
Получаем из журнала проводок главную книгу и сохраняем ее в таблице **general_ledger**:
```sql
!INCLUDE "code/step3_3.sqlx"
!INCLUDE "code/step3_3.out"
```
Выводим содержимое главной книги:
```sql
!INCLUDE "code/step3_4.sqlx"
!INCLUDE "code/step3_4.out"
```
Обороты по счетам:
```sql
!INCLUDE "code/step3_5.sqlx"
!INCLUDE "code/step3_5.out"
```

Первые две проводки имеют отношение к одному событию - приход материалов. Этому событию могут соответствовать документы: товарно-транспортная накаладная и счет-фактура. Третья проводка - передача материалов со склада в производство. Это событие тоже сопровождается документом, например, накладной.
Таким образом, в general_journal мы можем добавить поле для идентификатора события или операции. А в таблице событий (или операций) организовать связь один-ко-многим с таблицей документов.

Процесс является последовательностью операций. Одним из элементарных операций может быть добавление проводок в бухгалтерскую систему. Для описания процессов может быть добавлена таблица шаблонов процессов.

В России событие прихода материалов в шаблонах будет сопровождаться двумя проводками по счету 10 и 19, а на западе, вероятно, будет одна проводка.

## Step 4. Счет материалы. Аналитический учет

Материалы могут храниться на складах. Добавим склады и используем субсчета.

Файл **step4.sql**:
```sql
!INCLUDE "code/step4.sql"

```
Выполняем проводки с использованием счета 10:
```sql
!INCLUDE "code/step4_1.sqlx"
!INCLUDE "code/step4_1.out"
```
Выводим содержимое журнала:
```sql
!INCLUDE "code/step4_2.sqlx"
!INCLUDE "code/step4_2.out"
```
Получаем из журнала проводок главную книгу и сохраняем ее в таблице **general_ledger**:
```sql
!INCLUDE "code/step4_3.sqlx"
!INCLUDE "code/step4_3.out"
```
Выводим содержимое главной книги:
```sql
!INCLUDE "code/step4_4.sqlx"
!INCLUDE "code/step4_4.out"
```
Обороты по счетам:
```sql
!INCLUDE "code/step4_5.sqlx"
!INCLUDE "code/step4_5.out"
```
Обороты по субсчетам:
```sql
!INCLUDE "code/step4_6.sqlx"
!INCLUDE "code/step4_6.out"
```
Обороты по субсчетам и складам:
```sql
!INCLUDE "code/step4_7.sqlx"
!INCLUDE "code/step4_7.out"
```
Обороты только по счету 10 и складам:
```sql
!INCLUDE "code/step4_8.sqlx"
!INCLUDE "code/step4_8.out"
```

Посмотрим на полученный журнал general_journal. Здесь, как видим, для счетов 19, 20 и 60 не нужны идентификаторы складов. Для счета 10 идентификатор склада по дебету нужен только для проводок по этому счету по дебету, и, наоборот, идентификатор склада по кредиту нужен для проводок по этому счету по кредиту. 

Таким образом, мы можем попробовать создать для каждого счета собственный журнал со своим набором полей, то есть с собственной структурой. Попробуем это сделать на следующих днях.

Мы можем добавить поле для количественного учета материалов, которое будет не нужно только для 19 счета. Мы можем добавить для разных счетов другие нужные поля. С добавлением полей будет увеличиваться количество возможных отчетов.

## Step 5. Занимательное

1. Для описания процессов может быть разработана экспертная система. Содержимое главы 10 Knowledge Representation книги [Artificial Intelligence. A Modern Approach](http://aima.cs.berkeley.edu/newchap00.pdf) может быть интересным. Тем более что при разработке плана счетов, при добавлении субсчетов и полей для аналитики затрагиваются темы классификации и онтологии.
Какой-то базовый контент этой экспертной системы будет разработан нами. Например, какой-то базовый контент систем учета для отдельных стран. Остальной контент для разных отраслей и конкретных производств может быть разработан на местах. Разработка и внедрение такого контента вполне может потянуть на суммы озвученные в конкурсной документации РФРИТ [https://ит-гранты.рф/2](https://xn----8sbis2aqlf5f.xn--p1ai/2).
1. Сейчас рассматриваю следующий стэк технологий: PostgreSQL, SQLAlchemy, FastAPI, Svelte/Material.
1. Деплой на десктопы будет выполняться с помощью Ansible.